package DAO;

import Model.Message;
import Util.ConnectionUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * A DAO is a class that mediates the transformation of data between the format of objects in Java to rows in a
 * database. The methods here are mostly filled out, you will just need to add a SQL statement.
 *
 * We may assume that the database has already created a table named 'message'.
 * It contains similar values as the Message class:
 * message_id int primary key auto_increment,
    posted_by int,
    message_text varchar(255),
    time_posted_epoch bigint,
    //
    foreign key (posted_by) references  account(account_id)
 */

public class MessageDAO {
    /**
     * Inserts a message into the message table which matches the values contained in the message object.
     * Uses the getters already written in the Message class to retrieve its values (getPosted_by(),
     * getMessage_text(),getTime_posted_epoch()). The message_id will be automatically generated by the SQL database, and JDBC will be able
     * to retrieve the generated ID automatically.
     *
     * Use of the sql String and set preparedStatement parameters.
     *
     */
   public Message postMessage(Message message){
      Connection connection = ConnectionUtil.getConnection();
      try {
          // SQL logic here.
          String sql = "INSERT INTO message (posted_by, message_text, time_posted_epoch) values (?, ?, ?);" ;
          PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

          // preparedStatement's setString and setInt methods here.
          
          int posted_by = message.getPosted_by();
          String message_text = message.getMessage_text();
          long time_posted = message.getTime_posted_epoch();
          
          preparedStatement.setInt(1,posted_by);
          preparedStatement.setString(2,message_text);
          preparedStatement.setLong(3,time_posted);


          preparedStatement.executeUpdate();
          ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
          if(pkeyResultSet.next()){
            int generated_message_id = (int) pkeyResultSet.getLong(1); // generates the message_id
            message.setMessage_id(generated_message_id); // sets the message_id, next line returns the full message info
            return new Message(message.getMessage_id(), message.getPosted_by(), message.getMessage_text(), message.getTime_posted_epoch());
          }
      }catch(SQLException e){
          System.out.println(e.getMessage());
      }
      return null;
  }

    /**
     * Returns all messages from the message table in a list.
     *
     */
    public List<Message> getAllMessages(){
      Connection connection = ConnectionUtil.getConnection();
      List<Message> messages = new ArrayList<>();
      try {
          // SQL logic here
          String sql = "SELECT * FROM message;";

          PreparedStatement preparedStatement = connection.prepareStatement(sql);
          ResultSet rs = preparedStatement.executeQuery();
          while(rs.next()){
              Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                      rs.getString("message_text"), rs.getLong("time_posted_epoch"));
              messages.add(message); // adds messages to messages list through while loop
          }
      }catch(SQLException e){
          System.out.println(e.getMessage());
      }
      return messages;
  }

  /**
     * Retrieves a specific message using its message ID.
     * Makes use of the int id parameter in the preparedStatement
     *
     * @param id a message ID.
     */
   public Message getMessageById(int id){
      Connection connection = ConnectionUtil.getConnection();
      try {
          // SQL logic here
          String sql = "SELECT * FROM message WHERE message_id = ?;";
          
          PreparedStatement preparedStatement = connection.prepareStatement(sql);


          // preparedStatement's setString and setInt methods here.
          preparedStatement.setInt(1,id);

          ResultSet rs = preparedStatement.executeQuery();
          while(rs.next()){
              Message message_by_id = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                      rs.getString("message_text"), rs.getLong("time_posted_epoch"));
              return message_by_id; // returns message by given message_id
          }
      }catch(SQLException e){
          System.out.println(e.getMessage());
      }
      return null;
  }

  /**
     * Deletes a specific message using its message ID. 
     * Makes use of the getMessageById() method.
     * 
     * Makes use of the int id parameter in the preparedStatement
     *
     * @param id a message ID.
     */
  public Message deleteMessageById(int message_id) throws Exception {
    Connection connection = ConnectionUtil.getConnection();
    Message message = getMessageById(message_id);

    // makes sure message exists
    if (message == null) {
        return null;
    }

    // SQL here.
    String sql = "DELETE FROM message WHERE message_id=?";
    // try - delete the message by the id given, catch - runtime and sql exceptions
    try {
        PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

        preparedStatement.setInt(1, message_id);

        preparedStatement.executeUpdate();
        return message;
    } catch (RuntimeException | SQLException runtimeException) {
        // System.err.println("MessageDAO: deleteMessageById, Exception occurred, message follows:");
        // System.err.println(runtimeException);
        throw runtimeException;
    }
}

    /**
     * Updates the message identified by the message id and message string.
     *
     * @param id a message ID.
     * @param message a message_text.
     */
    public void updateMessage(int id, String message) {
        Connection connection = ConnectionUtil.getConnection();
        try {
            // SQL logic here
            String sql = "UPDATE message SET message_text = ? WHERE message_id = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            // preparedStatement's setString and setInt methods here.
            preparedStatement.setString(1, message);
            preparedStatement.setInt(2, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

  /**
     * Returns all messages by account_id (posted_by) from the message table in a list.
     *
     */
  public List<Message> getAllMessagesbyUser(int id){
    Connection connection = ConnectionUtil.getConnection();
    List<Message> messages = new ArrayList<>();
    try {
        // SQL logic here
        String sql = "SELECT * FROM message WHERE posted_by =?;";

        PreparedStatement preparedStatement = connection.prepareStatement(sql);

        // preparedStatement's setString and setInt methods here.
        preparedStatement.setInt(1,id);

        ResultSet rs = preparedStatement.executeQuery();
        while(rs.next()){
            Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                    rs.getString("message_text"), rs.getLong("time_posted_epoch"));
            messages.add(message); // returns list of all messaged by posted_by id
        }
    }catch(SQLException e){
        System.out.println(e.getMessage());
    }
    return messages;
}


    
}
